{"version":3,"sources":["dist/js/bundle/node_modules/browser-pack/_prelude.js","dist/js/bundle/src/collection/token-map.ts","dist/js/bundle/src/main.test.ts","dist/js/bundle/src/task/flow/task-flow-when.ts","dist/js/bundle/src/task/flow/task-part-begin-constraint.ts","dist/js/bundle/src/task/flow/task-part-constraint.ts","dist/js/bundle/src/task/flow/task-part-end-constraint.ts","dist/js/bundle/src/task/flow/task-part-group-constraint.ts","dist/js/bundle/src/task/flow/task-part-time-constraint.ts","dist/js/bundle/src/task/operation/operation-manager.ts","dist/js/bundle/src/task/task-engine.ts","dist/js/bundle/src/task/task-part-when-events.ts","dist/js/bundle/src/task/task-part-when-operator.ts","dist/js/bundle/src/test/collection/token-map.test.ts","dist/js/bundle/src/test/logic/flow/log-message-task-flow-part.ts","dist/js/bundle/src/test/logic/log-task-engine.ts","dist/js/bundle/src/test/logic/sample-log.ts","dist/js/bundle/src/test/task/log-task-engine.test.ts","dist/js/bundle/src/test/task/operation/operation-manager.test.ts","dist/js/bundle/node_modules/@babel/runtime/helpers/assertThisInitialized.js","dist/js/bundle/node_modules/@babel/runtime/helpers/classCallCheck.js","dist/js/bundle/node_modules/@babel/runtime/helpers/createClass.js","dist/js/bundle/node_modules/@babel/runtime/helpers/getPrototypeOf.js","dist/js/bundle/node_modules/@babel/runtime/helpers/inherits.js","dist/js/bundle/node_modules/@babel/runtime/helpers/interopRequireDefault.js","dist/js/bundle/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","dist/js/bundle/node_modules/@babel/runtime/helpers/setPrototypeOf.js","dist/js/bundle/node_modules/@babel/runtime/helpers/typeof.js","dist/js/bundle/node_modules/events/events.js"],"names":[],"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":"bundle.test.js","sourceRoot":"../../..","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class TokenMap<T> {\r\n    //#region Properties\r\n\r\n    /**\r\n     * Inner map.\r\n     */\r\n    protected innerMap: Map<number, T>;\r\n\r\n    /**\r\n     * List of unused indexed bellow the maximun used index.\r\n     */\r\n    protected unusedIndexes: number[];\r\n\r\n    //#endregion\r\n\r\n    public constructor() {\r\n        this.innerMap = new Map<number, T>();\r\n        this.unusedIndexes = new Array();\r\n    }\r\n\r\n    /**\r\n     * Adds an element to the array collection.\r\n     * @param elem Element to be added to the array.\r\n     * @returns index in which the element is located.\r\n     */\r\n    public add(elem: T): number {\r\n        if (0 === this.unusedIndexes.length) {\r\n            const lastIndex: number = this.innerMap.size;\r\n            this.innerMap.set(lastIndex, elem);\r\n            return lastIndex;\r\n        } else {\r\n            const lastIndex: number = this.unusedIndexes[this.unusedIndexes.length - 1];\r\n            --this.unusedIndexes.length;\r\n            this.innerMap.set(lastIndex, elem);\r\n            return lastIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtains the amount of elements inside the array.\r\n     * @returns Amount of elements inside the array.\r\n     */\r\n    public count(): number {\r\n        return this.innerMap.size;\r\n    }\r\n\r\n    /**\r\n     * Iterates over the array and applies a function.\r\n     * @param consumer Function to apply to any pair of index-element found (undefined values are discarted).\r\n     */\r\n    public foreach(consumer: (value: T, key: number) => void): void {\r\n        this.innerMap.forEach(function(value: T, key: number) {\r\n            consumer(value, key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains an element at the specified index.\r\n     * @param index Index of the element to obtaint.\r\n     * @returns Element obtianed at the specified index.\r\n     */\r\n    public get(index: number): T {\r\n        return this.innerMap.get(index);\r\n    }\r\n\r\n    /**\r\n     * Removes an element at the position specified.\r\n     * @param index Index of the element to be removed.\r\n     * @returns Result of the operation.\r\n     */\r\n    public remove(index: number): boolean {\r\n        if (this.innerMap.has(index)) {\r\n            this.innerMap.delete(index);\r\n            this.unusedIndexes[this.unusedIndexes.length] = index;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { TokenMapTests } from './test/collection/token-map.test';\nimport { LogTaskEngineTests } from './test/task/log-task-engine.test';\nimport { OperationManagerTests } from './test/task/operation/operation-manager.test';\n\n(function() {\n    new LogTaskEngineTests().performTests();\n    new OperationManagerTests().performTests();\n    new TokenMapTests().performTests();\n}());\n","/**\r\n * Constraint that determines the start of the task part.\r\n */\r\nexport interface ITaskPartWhenConstraint {\r\n    /**\r\n     * When entity to check once this constraint is ensured.\r\n     */\r\n    after: ITaskPartWhenConstraint;\r\n    /**\r\n     * Type of this constraint.\r\n     */\r\n    constraintType: string;\r\n}\r\n\r\n/**\r\n * Constraint that determines the start of the task part.\r\n */\r\nexport abstract class TaskPartWhenConstraint implements ITaskPartWhenConstraint {\r\n    /**\r\n     * When entity to check once this constraint is ensured.\r\n     */\r\n    public after: ITaskPartWhenConstraint;\r\n    /**\r\n     * Type of this constraint.\r\n     */\r\n    public constraintType: string;\r\n\r\n    /**\r\n     * Creates a new task part constraint.\r\n     * @param after Constraint to apply after this constraint is checked.\r\n     * @param constraintType Constraint type.\r\n     */\r\n    public constructor(after: ITaskPartWhenConstraint, constraintType: string) {\r\n        this.after = after;\r\n        this.constraintType = constraintType;\r\n    }\r\n}\r\n","import { ITaskPartWhenConstraint } from './task-flow-when';\r\nimport {\r\n    TASK_CONSTRAINT_TYPES,\r\n    TaskPartConstraint,\r\n} from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once a task part starts.\r\n */\r\nexport class TaskPartBeginConstraint extends TaskPartConstraint {\r\n    public constructor(after: ITaskPartWhenConstraint, alias: string) {\r\n        super(after, alias, TASK_CONSTRAINT_TYPES.START);\r\n    }\r\n}\r\n","import {\r\n    ITaskPartWhenConstraint,\r\n    TaskPartWhenConstraint,\r\n} from './task-flow-when';\r\n\r\n/**\r\n * Task constraint types\r\n */\r\nexport const TASK_CONSTRAINT_TYPES = {\r\n    /**\r\n     * Requires the end of a task part.\r\n     */\r\n    END: 'anim.end',\r\n    /**\r\n     * Requires a group of constraints.\r\n     */\r\n    GROUP: 'group',\r\n    /**\r\n     * Requires the start of a task part.\r\n     */\r\n    START : 'anim.start',\r\n    /**\r\n     * Requires an amount of time.\r\n     */\r\n    WAIT_FOR: 'wait',\r\n};\r\n\r\nexport abstract class TaskPartConstraint extends TaskPartWhenConstraint {\r\n    /**\r\n     * Alias of the part affected by this constraint.\r\n     */\r\n    public alias: string;\r\n\r\n    /**\r\n     * Creates a new task part constraint.\r\n     * @param after Constraint to apply after this constraint is checked.\r\n     * @param alias Aliases of the parts affected by this constraint.\r\n     * @param constraintType Constraint type.\r\n     */\r\n    public constructor(after: ITaskPartWhenConstraint, alias: string, constraintType: string) {\r\n        super(after, constraintType);\r\n\r\n        this.alias = alias;\r\n    }\r\n}\r\n","import { ITaskPartWhenConstraint } from './task-flow-when';\r\nimport {\r\n    TASK_CONSTRAINT_TYPES,\r\n    TaskPartConstraint,\r\n} from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once a task part ends.\r\n */\r\nexport class TaskPartEndConstraint extends TaskPartConstraint {\r\n    public constructor(after: ITaskPartWhenConstraint, alias: string) {\r\n        super(after, alias, TASK_CONSTRAINT_TYPES.END);\r\n    }\r\n}\r\n","import { TaskPartWhenOperator } from '../task-part-when-operator';\r\nimport {\r\n    ITaskPartWhenConstraint,\r\n    TaskPartWhenConstraint,\r\n} from './task-flow-when';\r\nimport { TASK_CONSTRAINT_TYPES } from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once a group of constraints are checked.\r\n */\r\nexport class TaskGroupConstraint extends TaskPartWhenConstraint {\r\n    /**\r\n     * Constraints to ensure\r\n     */\r\n    public constraints: ITaskPartWhenConstraint[];\r\n    /**\r\n     * Logical operator\r\n     */\r\n    public operator: TaskPartWhenOperator;\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     *\r\n     * @param after Constraint to check after all the constraitns of the group have successfully checked.\r\n     * @param constraints Group of constraints to check.\r\n     * @param operator Logical operator to apply.\r\n     */\r\n    public constructor(\r\n        after: ITaskPartWhenConstraint,\r\n        constraints: ITaskPartWhenConstraint[],\r\n        operator: TaskPartWhenOperator,\r\n    ) {\r\n        super(after, TASK_CONSTRAINT_TYPES.GROUP);\r\n\r\n        this.constraints = constraints;\r\n        this.operator = operator;\r\n    }\r\n}\r\n","import {\r\n    ITaskPartWhenConstraint,\r\n    TaskPartWhenConstraint,\r\n} from './task-flow-when';\r\nimport { TASK_CONSTRAINT_TYPES } from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once an amount of time passes.\r\n */\r\nexport class TaskTimeConstraint extends TaskPartWhenConstraint {\r\n    /**\r\n     * Milliseconds to wait.\r\n     */\r\n    public millis: number;\r\n\r\n    public constructor(after: ITaskPartWhenConstraint, millis: number) {\r\n        super(after, TASK_CONSTRAINT_TYPES.WAIT_FOR);\r\n        this.millis = millis;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { TokenMap } from '../../collection/token-map';\r\nimport { IOperationManagerAccess } from './operation-manager-access';\r\n\r\n/**\r\n * Operation arguments\r\n */\r\nexport interface IOperationArgs {\r\n    aliases: string[];\r\n}\r\n\r\n/**\r\n * Represents an operation manager. The operation is propagated using an event.\r\n * All the subscribers\r\n */\r\nexport class OperationManager<Args extends IOperationArgs> implements IOperationManagerAccess<Args> {\r\n\r\n    //#region Attributes\r\n\r\n    /**\r\n     * Function to be called to handle the event.\r\n     */\r\n    protected callFunction: (eventArgs: Args) => void;\r\n\r\n    /**\r\n     * Alias of the event.\r\n     */\r\n    protected eventAlias: string;\r\n\r\n    /**\r\n     * Event emmitter of the event.\r\n     */\r\n    protected eventEmitter: EventEmitter;\r\n\r\n    /**\r\n     * Object to storage all the functions subscribed.\r\n     */\r\n    protected subscriptionStorage: { [alias: string]: TokenMap<(eventArgs: Args) => void> };\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Creates a new operation manager\r\n     * @param eventAlias Event alias.\r\n     * @param eventEmitter Event emitter.\r\n     */\r\n    public constructor(eventAlias: string, eventEmitter: EventEmitter) {\r\n        const that = this;\r\n        this.callFunction = function(eventArgs: Args): void {\r\n            if (eventArgs.aliases == null) {\r\n                for (const alias in that.subscriptionStorage) {\r\n                    if (that.subscriptionStorage.hasOwnProperty(alias)) {\r\n                        const subscribers = that.subscriptionStorage[alias];\r\n                        if (subscribers != null) {\r\n                            subscribers.foreach(function(value: (eventArgs: Args) => void) {\r\n                                value(eventArgs);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (const alias of eventArgs.aliases) {\r\n                    const subscribers = that.subscriptionStorage[alias];\r\n                    if (subscribers != null) {\r\n                        subscribers.foreach(function(value: (eventArgs: Args) => void) {\r\n                            value(eventArgs);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this.eventAlias = eventAlias;\r\n        this.eventEmitter = eventEmitter;\r\n        this.subscriptionStorage = {};\r\n\r\n        this.eventEmitter.addListener(this.eventAlias, this.callFunction);\r\n    }\r\n\r\n    /**\r\n     * Disposes the instance.\r\n     */\r\n    public dispose(): void {\r\n        this.eventEmitter.removeListener(this.eventAlias, this.callFunction);\r\n    }\r\n\r\n    /**\r\n     * Substribes a handler under an alias.\r\n     * @param alias Alias of the handler.\r\n     * @param handler Handler to be subscribed.\r\n     */\r\n    public subscribe(alias: string, handler: (eventArgs: Args) => void): number {\r\n        if (null == this.subscriptionStorage[alias]) {\r\n            this.subscriptionStorage[alias] = new TokenMap();\r\n        }\r\n        return this.subscriptionStorage[alias].add(handler);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes a handler under an alias.\r\n     * @param alias Alias of the handler.\r\n     * @param index Index of the handler.\r\n     */\r\n    public unsubscribe(alias: string, index: number): boolean {\r\n        if (null == this.subscriptionStorage[alias]) {\r\n            return false;\r\n        } else {\r\n            return this.subscriptionStorage[alias].remove(index);\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { ITaskFlow } from './flow/task-flow';\r\nimport { ITaskFlowPart } from './flow/task-flow-part';\r\nimport {\r\n    ITaskFlowPartEndArgs,\r\n    ITaskFlowPartStartArgs,\r\n} from './flow/task-flow-part-event-args';\r\nimport { ITaskPartWhenConstraint } from './flow/task-flow-when';\r\nimport { TaskPartBeginConstraint } from './flow/task-part-begin-constraint';\r\nimport { TASK_CONSTRAINT_TYPES } from './flow/task-part-constraint';\r\nimport { TaskPartEndConstraint } from './flow/task-part-end-constraint';\r\nimport { TaskGroupConstraint } from './flow/task-part-group-constraint';\r\nimport { TaskTimeConstraint } from './flow/task-part-time-constraint';\r\nimport { OperationManager } from './operation/operation-manager';\r\nimport { IOperationManagerAccess } from './operation/operation-manager-access';\r\nimport { TASK_PART_WHEN_EVENTS } from './task-part-when-events';\r\nimport { TaskPartWhenOperator } from './task-part-when-operator';\r\n\r\n/**\r\n * Represents a task engine.\r\n */\r\nexport abstract class TaskEngine<TPart extends ITaskFlowPart> {\r\n    //#region Attributes\r\n\r\n    /**\r\n     * Task currently managed.\r\n     */\r\n    protected currentTask: ITaskFlow<TPart>;\r\n\r\n    /**\r\n     * Event emitter to use\r\n     */\r\n    protected eventEmitter: EventEmitter;\r\n\r\n    //#region Operations\r\n\r\n    /**\r\n     * Manager that handles the part end event.\r\n     */\r\n    protected partEndManager: OperationManager<ITaskFlowPartEndArgs<TPart>>;\r\n\r\n    /**\r\n     * Manager that handles the part start event.\r\n     */\r\n    protected partStartManager: OperationManager<ITaskFlowPartStartArgs<TPart>>;\r\n\r\n    //#endregion\r\n\r\n    //#endregion\r\n\r\n    //#region Public\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     */\r\n    public constructor() {\r\n        this.eventEmitter = new EventEmitter();\r\n\r\n        this.partEndManager = new OperationManager<ITaskFlowPartEndArgs<TPart>>(\r\n            TASK_PART_WHEN_EVENTS.END,\r\n            this.eventEmitter,\r\n        );\r\n        this.partStartManager = new OperationManager<ITaskFlowPartStartArgs<TPart>>(\r\n            TASK_PART_WHEN_EVENTS.START,\r\n            this.eventEmitter,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Obtains the access of the part end event.\r\n     * @returns Access of the part end event.\r\n     */\r\n    public getPartEndListenerAccess(): IOperationManagerAccess<ITaskFlowPartEndArgs<TPart>> {\r\n        const that = this;\r\n        return {\r\n            subscribe: function(\r\n                alias: string,\r\n                handler: (eventArgs: ITaskFlowPartEndArgs<TPart>) => void,\r\n            ): number {\r\n                return that.partEndManager.subscribe(alias, handler);\r\n            },\r\n            unsubscribe: function(alias: string, index: number): boolean {\r\n                return that.partEndManager.unsubscribe(alias, index);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Obtains the access of the part start event.\r\n     * @returns Access of the part start event.\r\n     */\r\n    public getPartStartListenerAccess(): IOperationManagerAccess<ITaskFlowPartStartArgs<TPart>> {\r\n        const that = this;\r\n        return {\r\n            subscribe: function(\r\n                alias: string,\r\n                handler: (eventArgs: ITaskFlowPartStartArgs<TPart>) => void,\r\n            ): number {\r\n                return that.partStartManager.subscribe(alias, handler);\r\n            },\r\n            unsubscribe: function(alias: string, index: number): boolean {\r\n                return that.partStartManager.unsubscribe(alias, index);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a task flow.\r\n     * @param taskFlow Task flow to be managed.\r\n     * @returns Task part promises.\r\n     */\r\n    public handle(taskFlow: ITaskFlow<TPart>): Array<Promise<void>> {\r\n        if (taskFlow == null) {\r\n            throw new Error('It\\'s required a task flow.');\r\n        }\r\n        if (taskFlow.parts == null) {\r\n            throw new Error('It\\'s required a task flow with parts.');\r\n        }\r\n\r\n        this.currentTask = taskFlow;\r\n        const partPromises: Array<Promise<void>> = new Array(taskFlow.parts.length);\r\n\r\n        for (var i = 0; i < taskFlow.parts.length; ++i) {\r\n            partPromises[i] = this.handleTaskPart(taskFlow.parts[i]);\r\n        }\r\n\r\n        return partPromises;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Handles a task part.\r\n     *\r\n     * @param part Task part to handle.\r\n     *\r\n     * @returns Promise resolved once the part of the task is finished.\r\n     */\r\n    protected handleTaskPart(part: TPart): Promise<void> {\r\n        const that = this;\r\n\r\n        return new Promise<void>(function(resolve, reject) {\r\n            that.handleTaskPartWhen(part.when).then(function() {\r\n                // 1. Emit the start of task part.\r\n                that.eventEmitter.emit(\r\n                    TASK_PART_WHEN_EVENTS.START,\r\n                    {\r\n                        aliases: [part.alias],\r\n                        part: part,\r\n                    } as ITaskFlowPartStartArgs<TPart>,\r\n                );\r\n\r\n                const promise: PromiseLike<{} | void> = that.performTask(part);\r\n\r\n                promise.then(function() {\r\n                    // 3. Emit the end of the task part and resolve the promise.\r\n                    that.eventEmitter.emit(\r\n                        TASK_PART_WHEN_EVENTS.END,\r\n                        {\r\n                            aliases: [part.alias],\r\n                            part: part,\r\n                        } as ITaskFlowPartEndArgs<TPart>,\r\n                    );\r\n                    resolve();\r\n                });\r\n            }).catch(function(err: any) {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs a task part.\r\n     * @param part Task part to be performed.\r\n     * @returns Promise resolved once the part task is performed.\r\n     */\r\n    protected abstract performTask(part: TPart): PromiseLike<{} | void>;\r\n\r\n    //#region TaskPartWhenconstraint\r\n\r\n    /**\r\n     * Handles the when entity of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhen(whenEntity: ITaskPartWhenConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            if (null == whenEntity) {\r\n                resolve();\r\n            } else {\r\n                switch (whenEntity.constraintType) {\r\n                    case TASK_CONSTRAINT_TYPES.START:\r\n                        that.handleTaskPartWhenPartBegins(whenEntity as TaskPartBeginConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.END:\r\n                        that.handleTaskPartWhenPartEnds(whenEntity as TaskPartEndConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.GROUP:\r\n                        that.handleTaskPartWhenPartGroup(whenEntity as TaskGroupConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.WAIT_FOR:\r\n                        that.handleTaskPartWhenWaitFor(whenEntity as TaskTimeConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    default:\r\n                        reject(new Error('Unexpected when entity type.'));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskPartBeginConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartBegins(whenEntity: TaskPartBeginConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const eventHandler = function() {\r\n                that.partStartManager.unsubscribe(whenEntity.alias, token);\r\n                if (null == whenEntity.after) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            };\r\n            const token: number = that.partStartManager.subscribe(whenEntity.alias, eventHandler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskPartEndConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartEnds(whenEntity: TaskPartEndConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const eventHandler = function() {\r\n                that.partEndManager.unsubscribe(whenEntity.alias, token);\r\n                if (null == whenEntity.after) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            };\r\n            const token: number = that.partEndManager.subscribe(whenEntity.alias, eventHandler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskGroupConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartGroup(whenEntity: TaskGroupConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const childPromises: Array<Promise<void>> = new Array(whenEntity.constraints.length);\r\n\r\n            for (var i = 0; i < whenEntity.constraints.length; ++i) {\r\n                childPromises[i] = new Promise<void>(function(resolve, reject) {\r\n                    that.handleTaskPartWhen(whenEntity.constraints[i])\r\n                        .then(resolve);\r\n                });\r\n            }\r\n\r\n            if (TaskPartWhenOperator.AND === whenEntity.operator) {\r\n                Promise.all(childPromises)\r\n                    .then(function() {\r\n                        resolve();\r\n                    });\r\n            } else if (TaskPartWhenOperator.OR === whenEntity.operator) {\r\n                Promise.race(childPromises)\r\n                .then(function() {\r\n                    resolve();\r\n                });\r\n            } else {\r\n                reject('Unexpected operator.');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskTimeConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenWaitFor(whenEntity: TaskTimeConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            setTimeout(function() {\r\n                if (whenEntity.after == null) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            }, whenEntity.millis);\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","/**\r\n * Prefixes used to ganerate alias for events over task parts.\r\n */\r\nexport const TASK_PART_WHEN_EVENTS = {\r\n    /**\r\n     * Prefix for any event raised once a task part is ended.\r\n     */\r\n    END: 'part.end',\r\n    /**\r\n     * Prefix for any event raised once a task part is started.\r\n     */\r\n    START: 'part.start',\r\n};\r\n","/**\r\n * Logical operator to apply.\r\n */\r\nexport enum TaskPartWhenOperator {\r\n    /**\r\n     * And operator.\r\n     */\r\n    AND,\r\n    /**\r\n     * Or operator.\r\n     */\r\n    OR,\r\n}\r\n","import { TokenMap } from '../../collection/token-map';\r\nimport { ITest } from '../ITest';\r\n\r\nexport class TokenMapTests implements ITest {\r\n\r\n    public performTests(): void {\r\n        describe('Token Map Tests', () => {\r\n            this.itMustBeInitializable();\r\n            this.itMustBeAbleToAddElements();\r\n            this.itMustBeAbleToAddAndRemoveElements();\r\n            this.itMustBeAbleToIterateOverElements();\r\n            this.itMustBeAbleToReuseUnusedIndexes();\r\n            this.itMustNotBeAbleToRemoveUnusedIndexes();\r\n        });\r\n    }\r\n\r\n    private itMustBeInitializable(): void {\r\n        it('mustBeInitializable', () => {\r\n            const map = new TokenMap();\r\n            expect(map).not.toBe(null);\r\n            expect(map.count()).toBe(0);\r\n        });\r\n    }\r\n\r\n    private itMustBeAbleToAddElements(): void {\r\n        it('mustBeAbleToAddElements', () => {\r\n            const map = new TokenMap<{}>();\r\n            const elementsToAdd = 64;\r\n\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.add(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.get(i)).toBe(i);\r\n            }\r\n\r\n            expect(map.count()).toBe(elementsToAdd);\r\n        });\r\n    }\r\n\r\n    private itMustBeAbleToAddAndRemoveElements(): void {\r\n        it('mustBeAbleToAddAndRemoveElements', () => {\r\n            const map = new TokenMap<{}>();\r\n            const elementsToAdd = 64;\r\n            const elementsToRemove = 32;\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.add(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.get(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToRemove; ++i) {\r\n                expect(map.remove(i)).toBe(true);\r\n            }\r\n\r\n            expect(map.count()).toBe(elementsToAdd - elementsToRemove);\r\n        });\r\n    }\r\n\r\n    private itMustBeAbleToIterateOverElements() {\r\n        it('mustBeAbleToIterateOverElements', () => {\r\n            const map = new TokenMap<number>();\r\n            const elementsToAdd = 8;\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                const power = Math.pow(2, i);\r\n                map.add(power);\r\n            }\r\n\r\n            let sum = 0;\r\n            map.foreach((value, key) => {\r\n                sum = sum + value;\r\n            });\r\n\r\n            const expectedValue = Math.pow(2, elementsToAdd) - 1;\r\n            expect(sum).toBe(expectedValue);\r\n        });\r\n    }\r\n\r\n    private itMustBeAbleToReuseUnusedIndexes(): void {\r\n        it('mustBeAbleToReuseUnusedIndexes', () => {\r\n            const map = new TokenMap<{}>();\r\n            const elementsToAdd = 64;\r\n            const elementsToRemove = 32;\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.add(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.get(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToRemove; ++i) {\r\n                expect(map.remove(i)).toBe(true);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToRemove; ++i) {\r\n                expect(map.add(i)).toBeLessThan(elementsToRemove);\r\n            }\r\n\r\n            expect(map.count()).toBe(elementsToAdd);\r\n        });\r\n    }\r\n\r\n    private itMustNotBeAbleToRemoveUnusedIndexes(): void {\r\n        it('mustNotBeAbleToRemoveUnusedIndexes', () => {\r\n            const map = new TokenMap<{}>();\r\n            expect(map.remove(0)).toBe(false);\r\n        });\r\n    }\r\n}\r\n","import { ITaskFlowPart } from '../../../task/flow/task-flow-part';\nimport { ITaskPartWhenConstraint } from '../../../task/flow/task-flow-when';\n\nexport class LogMessageTaskFlowPart implements ITaskFlowPart {\n    /**\n     * Alias of the part\n     */\n    public alias: string;\n    /**\n     * Message to log.\n     */\n    public message: string;\n    /**\n     * The message won't be log until the promise is fullfilled.\n     */\n    public waitForPromise: PromiseLike<{} | void>;\n    /**\n     * Constraints to ensure before applying the styles.\n     */\n    public when: ITaskPartWhenConstraint;\n\n    /**\n     * Creates a new instance of this class.\n     *\n     * @param alias alias of the part.\n     * @param message message to log.\n     * @param waitForPromise Promise that must be fullfilled before loging the message.\n     * @param when When constraint of the task.\n     */\n    public constructor(\n        alias: string,\n        message: string,\n        waitForPromise: PromiseLike<{} | void> = null,\n        when: ITaskPartWhenConstraint = null,\n    ) {\n        this.alias = alias;\n        this.message = message;\n        this.waitForPromise = waitForPromise;\n        this.when = when;\n    }\n}\n","import { TaskEngine } from '../../task/task-engine';\nimport { LogMessageTaskFlowPart } from './flow/log-message-task-flow-part';\nimport { SampleLog } from './sample-log';\n\nexport class LogTaskEngine extends TaskEngine<LogMessageTaskFlowPart> {\n\n    /**\n     * Engine's log used to store messages.\n     */\n    protected log: SampleLog;\n\n    /**\n     * Creates a new engine.\n     * @param log Engine's log. If null is passed, the engine will create a new log.\n     */\n    public constructor(log: SampleLog = null) {\n        super();\n\n        if (null == log) {\n            log = new SampleLog();\n        }\n\n        this.log = log;\n    }\n\n    /**\n     * Obtains the engine's log.\n     */\n    public getLog(): SampleLog {\n        return this.log;\n    }\n\n    /**\n     * Performs a task flow part.\n     * @param part Task flow part.\n     */\n    protected performTask(\n        part: LogMessageTaskFlowPart,\n    ): PromiseLike<{} | void> {\n        const that = this;\n        return new Promise((resolve, reject) => {\n            const logAction = () => {\n                that.log.logMessage(part.message);\n                resolve();\n            };\n            if (null == part.waitForPromise) {\n                logAction();\n            } else {\n                part.waitForPromise.then(logAction);\n            }\n        });\n    }\n}\n","export class SampleLog {\n\n    /**\n     * Log counter. The log has as many entries as the value of this counter.\n     */\n    protected logCounter: number;\n\n    /**\n     * Messages array\n     */\n    protected messageArray: string[];\n\n    /**\n     * Messages indexes.\n     */\n    protected messageIndexes: {[key: string]: number};\n\n    /**\n     * Creates a new sample log.\n     */\n    public constructor() {\n        this.logCounter = 0;\n        this.messageArray = new Array();\n        this.messageIndexes = {};\n    }\n\n    /**\n     * Logs a message.\n     * @param message Message to be logged.\n     */\n    public logMessage(message: string) {\n        this.messageArray.push(message);\n        this.messageIndexes[message] = this.logCounter;\n        ++this.logCounter;\n    }\n\n    /**\n     * Returns the message at the specified index.\n     * @param index index of the message.\n     */\n    public getMessage(index: number): string {\n        return this.messageArray[index];\n    }\n\n    /**\n     * Returns the index of a message.\n     * @param message Message whose index is searched.\n     */\n    public getMessageIndex(message: string): number {\n        return this.messageIndexes[message];\n    }\n\n    /**\n     * Returns a copy of the messages in the log.\n     * @returns Log array.\n     */\n    public getMessages(): string[] {\n        const messagesCopy = new Array();\n        for (const message of this.messageArray) {\n            messagesCopy.push(message);\n        }\n        return messagesCopy;\n    }\n}\n","import { ITaskFlow } from '../../task/flow/task-flow';\nimport { TaskPartBeginConstraint } from '../../task/flow/task-part-begin-constraint';\nimport { TaskPartEndConstraint } from '../../task/flow/task-part-end-constraint';\nimport { TaskGroupConstraint } from '../../task/flow/task-part-group-constraint';\nimport { TaskTimeConstraint } from '../../task/flow/task-part-time-constraint';\nimport { TaskPartWhenOperator } from '../../task/task-part-when-operator';\nimport { ITest } from '../ITest';\nimport {\n    LogMessageTaskFlowPart,\n} from '../logic/flow/log-message-task-flow-part';\nimport { LogTaskEngine } from '../logic/log-task-engine';\nimport { SampleLog } from '../logic/sample-log';\n\nconst LogMessageTaskFlowPartAliasPrefix: string = 'jovellanos/test/LogMessageTaskFlowPart/';\n\nexport class LogTaskEngineTests implements ITest {\n\n    public performTests(): void {\n        describe('Log Task Engine Tests', () => {\n            this.itMustBeAbleToPerformASimpleTask();\n            this.itMustBeAbleToPerformATaskAfterACertainAmountOfTime();\n            this.itMustBeAbleToPerformATaskAfterTheEndOfAllTasksOfATaskGroup();\n            this.itMustBeAbleToPerformATaskAfterTheEndOfAnotherOne();\n            this.itMustBeAbleToPerformATaskAfterTheStartOfAnotherOne();\n            this.itMustBeAbleToPerformATaskAfterTheStartOfAnyTaskOfATaskGroup();\n            this.itMustBeAbleToSubscribeAPartEndEventListener();\n            this.itMustBeAbleToSubscribeAPartStartEventListener();\n            this.itMustBeAbleToUnsubscribeAPartEndEventListener();\n            this.itMustBeAbleToUnsubscribeAPartStartEventListener();\n            this.itMustBeInitializable();\n            this.itMustNotAllowToHandleANullInstance();\n            this.itMustNotAllowToHandleAnInstanceWithNoParts();\n            this.itMustNotBeAbleToHandleAnInvalidTask();\n            this.itMustStartWithALog();\n            this.itMustStartWithNoMessages();\n        });\n    }\n\n    private itMustBeAbleToPerformASimpleTask(): void {\n        it('mustBeAbleToPerformASimpleTask', () => {\n            const engine = new LogTaskEngine();\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        LogMessageTaskFlowPartAliasPrefix + 'sample',\n                        'test',\n                    ),\n                ],\n            };\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual(['test']);\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterACertainAmountOfTime() {\n        it('mustBeAbleToPerformATaskAfterACertainAmountOfTime', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const partAlias3 = LogMessageTaskFlowPartAliasPrefix + 'sample-3';\n\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n\n            const taskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        partAlias1,\n                        'test-1',\n                        new Promise((resolve) => setTimeout(resolve, 200)),\n                    ),\n                    new LogMessageTaskFlowPart(\n                        partAlias2,\n                        'test-2',\n                        null,\n                        new TaskTimeConstraint(null, 250),\n                    ),\n                    new LogMessageTaskFlowPart(\n                        partAlias3,\n                        'test-3',\n                        new Promise((resolve) => setTimeout(resolve, 300)),\n                    ),\n                ],\n            };\n\n            Promise.all(engine.handle(taskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual(['test-1', 'test-2', 'test-3']);\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterTheEndOfAllTasksOfATaskGroup() {\n        it('mustBeAbleToPerformATaskAfterTheEndOfAllTasksOfATaskGroup', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const partAlias3 = LogMessageTaskFlowPartAliasPrefix + 'sample-3';\n\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n\n            const taskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        partAlias1,\n                        'test-1',\n                        null,\n                        new TaskGroupConstraint(\n                            null,\n                            [\n                                new TaskPartEndConstraint(\n                                    null,\n                                    partAlias2,\n                                ),\n                                new TaskPartEndConstraint(\n                                    null,\n                                    partAlias3,\n                                ),\n                            ],\n                            TaskPartWhenOperator.AND,\n                        ),\n                    ),\n                    new LogMessageTaskFlowPart(\n                        partAlias2,\n                        'test-2',\n                        null,\n                    ),\n                    new LogMessageTaskFlowPart(\n                        partAlias3,\n                        'test-3',\n                        null,\n                    ),\n                ],\n            };\n\n            Promise.all(engine.handle(taskFlow)).then(() => {\n                const logMessages = engine.getLog().getMessages();\n                const firstOnes = ['test-2', 'test-3'];\n                expect(firstOnes).toContain(logMessages[0]);\n                expect(firstOnes).toContain(logMessages[1]);\n                expect(logMessages[0]).not.toBe(logMessages[1]);\n                expect(logMessages[2]).toBe('test-1');\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterTheEndOfAnotherOne(): void {\n        it('mustBeAbleToPerformATaskAfterTheEndOfAnotherOne', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            const taskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        partAlias1,\n                        'test1',\n                        null,\n                        new TaskPartEndConstraint(null, partAlias2),\n                    ),\n                    new LogMessageTaskFlowPart(partAlias2, 'test2'),\n                ],\n            };\n            Promise.all(engine.handle(taskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual(['test2', 'test1']);\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterTheStartOfAnotherOne(): void {\n        it('mustBeAbleToPerformATaskAfterTheStartOfAnotherOne', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n\n            const part1SubscriberIsRegistered = new Promise<{\n                donePromise: Promise<number>,\n            }>(\n                (resolve) => {\n                    const part1IsDone = new Promise<number>((resolveCh) => {\n                        const token = engine.getPartEndListenerAccess().subscribe(partAlias1, () => {\n                            resolveCh(token);\n                        });\n                    });\n                    resolve({\n                        donePromise: part1IsDone,\n                    });\n                },\n            );\n            part1SubscriberIsRegistered.then((promiseResult) => {\n                const taskFlow = {\n                    parts: [\n                        new LogMessageTaskFlowPart(\n                            partAlias1,\n                            'test1',\n                            null,\n                            new TaskPartBeginConstraint(null, partAlias2),\n                        ),\n                        new LogMessageTaskFlowPart(\n                            partAlias2,\n                            'test2',\n                            promiseResult.donePromise,\n                        ),\n                    ],\n                };\n                Promise.all(engine.handle(taskFlow)).then(() => {\n                    expect(engine.getLog().getMessages()).toEqual(['test1', 'test2']);\n                });\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterTheStartOfAnyTaskOfATaskGroup() {\n        it('mustBeAbleToPerformATaskAfterTheStartOfAnyTaskOfATaskGroup', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const partAlias3 = LogMessageTaskFlowPartAliasPrefix + 'sample-3';\n\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n\n            const part1SubscriberIsRegistered = new Promise<{\n                donePromise: Promise<number>,\n            }>(\n                (resolve) => {\n                    const part1IsDone = new Promise<number>((resolveCh) => {\n                        const token = engine.getPartEndListenerAccess().subscribe(partAlias1, () => {\n                            resolveCh(token);\n                        });\n                    });\n                    resolve({\n                        donePromise: part1IsDone,\n                    });\n                },\n            );\n\n            part1SubscriberIsRegistered.then((promiseResult) => {\n                const taskFlow = {\n                    parts: [\n                        new LogMessageTaskFlowPart(\n                            partAlias1,\n                            'test-1',\n                            null,\n                            new TaskGroupConstraint(\n                                null,\n                                [\n                                    new TaskPartBeginConstraint(null, partAlias2),\n                                    new TaskPartBeginConstraint(null, partAlias3),\n                                ],\n                                TaskPartWhenOperator.OR,\n                            ),\n                        ),\n                        new LogMessageTaskFlowPart(partAlias2, 'test-2', promiseResult.donePromise),\n                        new LogMessageTaskFlowPart(partAlias3, 'test-3', promiseResult.donePromise),\n                    ],\n                };\n\n                Promise.all(engine.handle(taskFlow)).then(() => {\n                    const logMessages = engine.getLog().getMessages();\n                    const lastOnes = ['test-2', 'test-3'];\n                    expect(lastOnes).toContain(logMessages[1]);\n                    expect(lastOnes).toContain(logMessages[2]);\n                    expect(logMessages[1]).not.toBe(logMessages[2]);\n                    expect(logMessages[0]).toBe('test-1');\n                });\n            });\n        });\n    }\n\n    private itMustBeAbleToSubscribeAPartEndEventListener(): void {\n        it('mustBeAbleToSubscribeAPartEndEventListener', () => {\n            const partAlias = LogMessageTaskFlowPartAliasPrefix + 'sample';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            engine.getPartEndListenerAccess().subscribe(\n                partAlias,\n                (eventArgs) => {\n                    log.logMessage('end.' + eventArgs.part.message);\n                },\n            );\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(partAlias, 'test'),\n                ],\n            };\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual([\n                    'test',\n                    'end.test',\n                ]);\n            });\n        });\n    }\n\n    private itMustBeAbleToSubscribeAPartStartEventListener(): void {\n        it('mustBeAbleToSubscribeAPartStartEventListener', () => {\n            const partAlias = LogMessageTaskFlowPartAliasPrefix + 'sample';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            engine.getPartStartListenerAccess().subscribe(\n                partAlias,\n                (eventArgs) => {\n                    log.logMessage('start.' + eventArgs.part.message);\n                },\n            );\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(partAlias, 'test'),\n                ],\n            };\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual([\n                    'start.test',\n                    'test',\n                ]);\n            });\n        });\n    }\n\n    private itMustBeAbleToUnsubscribeAPartEndEventListener(): void {\n        it('mustBeAbleToUnsubscribeAPartEndEventListener', () => {\n            const partAlias = LogMessageTaskFlowPartAliasPrefix + 'sample';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            const token = engine.getPartEndListenerAccess().subscribe(\n                partAlias,\n                (eventArgs) => {\n                    log.logMessage('end.' + eventArgs.part.message);\n                },\n            );\n            const result = engine.getPartEndListenerAccess().unsubscribe(partAlias, token);\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(partAlias, 'test'),\n                ],\n            };\n            expect(result).toBe(true);\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual([\n                    'test',\n                ]);\n            });\n        });\n    }\n\n    private itMustBeAbleToUnsubscribeAPartStartEventListener(): void {\n        it('mustBeAbleToUnsubscribeAPartStartEventListener', () => {\n            const partAlias = LogMessageTaskFlowPartAliasPrefix + 'sample';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            const token = engine.getPartStartListenerAccess().subscribe(\n                partAlias,\n                (eventArgs) => {\n                    log.logMessage('end.' + eventArgs.part.message);\n                },\n            );\n            const result = engine.getPartStartListenerAccess().unsubscribe(partAlias, token);\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(partAlias, 'test'),\n                ],\n            };\n            expect(result).toBe(true);\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual([\n                    'test',\n                ]);\n            });\n        });\n    }\n\n    private itMustBeInitializable(): void {\n        it('mustBeInitializable', () => {\n            const engine = new LogTaskEngine();\n            expect(engine).not.toBeNull();\n        });\n    }\n\n    private itMustNotAllowToHandleANullInstance(): void {\n        it('mustNotAllowToHandleANullInstance', () => {\n            const engine = new LogTaskEngine();\n            expect(() => {engine.handle(null); }).toThrowError();\n        });\n    }\n\n    private itMustNotAllowToHandleAnInstanceWithNoParts(): void {\n        it('mustNotAllowToHandleAnInstanceWithNoParts', () => {\n            const engine = new LogTaskEngine();\n            expect(() => {\n                engine.handle({} as ITaskFlow<LogMessageTaskFlowPart>);\n            }).toThrowError();\n            expect(() => {\n                engine.handle({\n                    parts: null,\n                });\n            }).toThrowError();\n        });\n    }\n\n    private itMustNotBeAbleToHandleAnInvalidTask() {\n        it('mustNotBeAbleToHandleAnInvalidTask', () => {\n            const engine = new LogTaskEngine();\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        LogMessageTaskFlowPartAliasPrefix + 'sample',\n                        'test',\n                        null,\n                        {\n                            after: null,\n                            constraintType: 'invalidType',\n                        },\n                    ),\n                ],\n            };\n            Promise.all(engine.handle(simpleTaskFlow))\n                .then(fail)\n                .catch((err) => expect(err instanceof Error).toBe(true));\n        });\n    }\n\n    private itMustStartWithALog(): void {\n        it('mustStartWithALog', () => {\n            const engine = new LogTaskEngine();\n            expect(engine.getLog()).not.toBeNull();\n        });\n    }\n\n    private itMustStartWithNoMessages(): void {\n        it('mustStartWithNoMessages', () => {\n            const engine = new LogTaskEngine();\n            expect(engine.getLog().getMessages().length).toBe(0);\n        });\n    }\n}\n","import { EventEmitter } from 'events';\nimport { ITaskFlowPartEndArgs } from '../../../task/flow/task-flow-part-event-args';\nimport { OperationManager } from '../../../task/operation/operation-manager';\nimport { ITest } from '../../ITest';\nimport { LogMessageTaskFlowPart } from '../../logic/flow/log-message-task-flow-part';\nimport { SampleLog } from '../../logic/sample-log';\n\nconst operationManagerTestEventAlias = 'test-alias';\n\nexport class OperationManagerTests implements ITest {\n    public performTests(): void {\n        describe('Operation Manager Tests', () => {\n            this.itMustBeToBeAbleToBeDisposed();\n            this.itMustBeInitializable();\n            this.itMustBeAbleToRaiseAnEventListeners();\n            this.itMustBeAbleToRaiseMultipleEventListeners();\n            this.itMustNotBeAbleToUnsuscribeByAnUnregisteredAlias();\n        });\n    }\n\n    private itMustBeToBeAbleToBeDisposed(): void {\n        it('mustBeToBeAbleToBeDisposed', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            const log = new SampleLog();\n            operationManager.subscribe(\n                'sample-alias',\n                (eventArgs) => log.logMessage(eventArgs.part.message),\n            );\n            operationManager.dispose();\n            eventEmitter.emit(\n                operationManagerTestEventAlias,\n                {\n                    aliases: ['sample-alias'],\n                    part: new LogMessageTaskFlowPart(\n                        'sample-task-alias',\n                        'sample-message-text',\n                    ),\n                } as ITaskFlowPartEndArgs<LogMessageTaskFlowPart>,\n            );\n            expect(log.getMessages()).toEqual([]);\n        });\n    }\n\n    private itMustBeAbleToRaiseAnEventListeners(): void {\n        it('mustBeAbleToRaiseAnEventListeners', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            const log = new SampleLog();\n            operationManager.subscribe(\n                'sample-alias',\n                (eventArgs) => log.logMessage(eventArgs.part.message),\n            );\n            eventEmitter.emit(\n                operationManagerTestEventAlias,\n                {\n                    aliases: ['sample-alias'],\n                    part: new LogMessageTaskFlowPart(\n                        'sample-task-alias',\n                        'sample-message-text',\n                    ),\n                } as ITaskFlowPartEndArgs<LogMessageTaskFlowPart>,\n            );\n            expect(log.getMessages()).toEqual(['sample-message-text']);\n        });\n    }\n\n    private itMustBeAbleToRaiseMultipleEventListeners(): void {\n        it('mustBeAbleToRaiseMultipleEventListeners', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            const log = new SampleLog();\n            operationManager.subscribe(\n                'sample-alias',\n                (eventArgs) => log.logMessage(eventArgs.part.message),\n            );\n            operationManager.subscribe(\n                'sample-alias-2',\n                (eventArgs) => log.logMessage(eventArgs.part.message),\n            );\n            eventEmitter.emit(\n                operationManagerTestEventAlias,\n                {\n                    aliases: null,\n                    part: new LogMessageTaskFlowPart(\n                        'sample-task-alias',\n                        'sample-message-text',\n                    ),\n                } as ITaskFlowPartEndArgs<LogMessageTaskFlowPart>,\n            );\n            expect(log.getMessages()).toEqual(['sample-message-text', 'sample-message-text']);\n        });\n    }\n\n    private itMustBeInitializable(): void {\n        it('mustBeInitializable', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            expect(operationManager).not.toBeNull();\n        });\n    }\n\n    private itMustNotBeAbleToUnsuscribeByAnUnregisteredAlias() {\n        it('mustNotBeAbleToUnsuscribeByAnUnregisteredAlias', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            expect(operationManager.unsubscribe('unexisting-alias', 0)).toBe(false);\n        });\n    }\n}\n","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}