{"version":3,"sources":["dist/js/bundle/node_modules/browser-pack/_prelude.js","dist/js/bundle/src/collection/token-map.ts","dist/js/bundle/src/main.ts","dist/js/bundle/src/task/flow/task-flow-when.ts","dist/js/bundle/src/task/flow/task-part-begin-constraint.ts","dist/js/bundle/src/task/flow/task-part-constraint.ts","dist/js/bundle/src/task/flow/task-part-end-constraint.ts","dist/js/bundle/src/task/flow/task-part-group-constraint.ts","dist/js/bundle/src/task/flow/task-part-time-constraint.ts","dist/js/bundle/src/task/operation/operation-manager.ts","dist/js/bundle/src/task/task-engine.ts","dist/js/bundle/src/task/task-part-when-events.ts","dist/js/bundle/src/task/task-part-when-operator.ts","dist/js/bundle/node_modules/@babel/runtime/helpers/assertThisInitialized.js","dist/js/bundle/node_modules/@babel/runtime/helpers/classCallCheck.js","dist/js/bundle/node_modules/@babel/runtime/helpers/createClass.js","dist/js/bundle/node_modules/@babel/runtime/helpers/getPrototypeOf.js","dist/js/bundle/node_modules/@babel/runtime/helpers/inherits.js","dist/js/bundle/node_modules/@babel/runtime/helpers/interopRequireDefault.js","dist/js/bundle/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","dist/js/bundle/node_modules/@babel/runtime/helpers/setPrototypeOf.js","dist/js/bundle/node_modules/@babel/runtime/helpers/typeof.js","dist/js/bundle/node_modules/events/events.js"],"names":[],"mappings":"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kB,UAAS,OAAT,EAAkB,MAAlB,EAAwB;AAC7C,QAAA,UAAU,CAAC,YAAA;AACP,cAAI,UAAU,CAAC,KAAX,IAAoB,IAAxB,EAA8B;AAC1B,YAAA,OAAO;AACV,WAFD,MAEO;AACH,YAAA,IAAI,CAAC,kBAAL,CAAwB,UAAU,CAAC,KAAnC,EACK,IADL,CACU,OADV;AAEH;AACJ,SAPS,EAOP,UAAU,CAAC,MAPJ,CAAV;AAQH,OATM,CAAP;AAUH;;;;;;;;;;;;;;ACxTE,IAAM,qBAAqB,GAAG;AAIjC,EAAA,GAAG,EAAE,UAJ4B;AAQjC,EAAA,KAAK,EAAE;AAR0B,CAA9B;;;;;;;;;;ACAP,IAAY,oBAAZ;;;AAAA,CAAA,UAAY,oBAAZ,EAAgC;AAI5B,EAAA,oBAAA,CAAA,oBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;AAIA,EAAA,oBAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;AACH,CATD,EAAY,oBAAoB,oCAApB,oBAAoB,GAAA,EAAA,CAAhC;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.dev.js","sourceRoot":"../../..","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export class TokenMap<T> {\r\n    //#region Properties\r\n\r\n    /**\r\n     * Inner map.\r\n     */\r\n    protected innerMap: Map<number, T>;\r\n\r\n    /**\r\n     * List of unused indexed bellow the maximun used index.\r\n     */\r\n    protected unusedIndexes: number[];\r\n\r\n    //#endregion\r\n\r\n    public constructor() {\r\n        this.innerMap = new Map<number, T>();\r\n        this.unusedIndexes = new Array();\r\n    }\r\n\r\n    /**\r\n     * Adds an element to the array collection.\r\n     * @param elem Element to be added to the array.\r\n     * @returns index in which the element is located.\r\n     */\r\n    public add(elem: T): number {\r\n        if (0 === this.unusedIndexes.length) {\r\n            const lastIndex: number = this.innerMap.size;\r\n            this.innerMap.set(lastIndex, elem);\r\n            return lastIndex;\r\n        } else {\r\n            const lastIndex: number = this.unusedIndexes[this.unusedIndexes.length - 1];\r\n            --this.unusedIndexes.length;\r\n            this.innerMap.set(lastIndex, elem);\r\n            return lastIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Obtains the amount of elements inside the array.\r\n     * @returns Amount of elements inside the array.\r\n     */\r\n    public count(): number {\r\n        return this.innerMap.size;\r\n    }\r\n\r\n    /**\r\n     * Iterates over the array and applies a function.\r\n     * @param consumer Function to apply to any pair of index-element found (undefined values are discarted).\r\n     */\r\n    public foreach(consumer: (value: T, key: number) => void): void {\r\n        this.innerMap.forEach(function(value: T, key: number) {\r\n            consumer(value, key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains an element at the specified index.\r\n     * @param index Index of the element to obtaint.\r\n     * @returns Element obtianed at the specified index.\r\n     */\r\n    public get(index: number): T {\r\n        return this.innerMap.get(index);\r\n    }\r\n\r\n    /**\r\n     * Removes an element at the position specified.\r\n     * @param index Index of the element to be removed.\r\n     * @returns Result of the operation.\r\n     */\r\n    public remove(index: number): boolean {\r\n        if (this.innerMap.has(index)) {\r\n            this.innerMap.delete(index);\r\n            this.unusedIndexes[this.unusedIndexes.length] = index;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","import { TaskPartBeginConstraint } from './task/flow/task-part-begin-constraint';\nimport { TaskPartEndConstraint } from './task/flow/task-part-end-constraint';\nimport { TaskGroupConstraint } from './task/flow/task-part-group-constraint';\nimport { TaskTimeConstraint } from './task/flow/task-part-time-constraint';\nimport { OperationManager } from './task/operation/operation-manager';\nimport { TaskEngine } from './task/task-engine';\nimport { TASK_PART_WHEN_EVENTS } from './task/task-part-when-events';\nimport { TaskPartWhenOperator } from './task/task-part-when-operator';\n\nconst jovellanos = {\n    task: {\n        TASK_PART_WHEN_EVENTS: TASK_PART_WHEN_EVENTS,\n        TaskEngine: TaskEngine,\n        TaskPartWhenOperator: TaskPartWhenOperator,\n        flow: {\n            TaskGroupConstraint: TaskGroupConstraint,\n            TaskPartBeginConstraint: TaskPartBeginConstraint,\n            TaskPartEndConstraint: TaskPartEndConstraint,\n            TaskTimeConstraint: TaskTimeConstraint,\n        },\n        operation: {\n            OperationManager: OperationManager,\n        },\n    },\n};\n\nmodule.exports = jovellanos;\n","/**\r\n * Constraint that determines the start of the task part.\r\n */\r\nexport interface ITaskPartWhenConstraint {\r\n    /**\r\n     * When entity to check once this constraint is ensured.\r\n     */\r\n    after: ITaskPartWhenConstraint;\r\n    /**\r\n     * Type of this constraint.\r\n     */\r\n    constraintType: string;\r\n}\r\n\r\n/**\r\n * Constraint that determines the start of the task part.\r\n */\r\nexport abstract class TaskPartWhenConstraint implements ITaskPartWhenConstraint {\r\n    /**\r\n     * When entity to check once this constraint is ensured.\r\n     */\r\n    public after: ITaskPartWhenConstraint;\r\n    /**\r\n     * Type of this constraint.\r\n     */\r\n    public constraintType: string;\r\n\r\n    /**\r\n     * Creates a new task part constraint.\r\n     * @param after Constraint to apply after this constraint is checked.\r\n     * @param constraintType Constraint type.\r\n     */\r\n    public constructor(after: ITaskPartWhenConstraint, constraintType: string) {\r\n        this.after = after;\r\n        this.constraintType = constraintType;\r\n    }\r\n}\r\n","import { ITaskPartWhenConstraint } from './task-flow-when';\r\nimport {\r\n    TASK_CONSTRAINT_TYPES,\r\n    TaskPartConstraint,\r\n} from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once a task part starts.\r\n */\r\nexport class TaskPartBeginConstraint extends TaskPartConstraint {\r\n    public constructor(after: ITaskPartWhenConstraint, alias: string) {\r\n        super(after, alias, TASK_CONSTRAINT_TYPES.START);\r\n    }\r\n}\r\n","import {\r\n    ITaskPartWhenConstraint,\r\n    TaskPartWhenConstraint,\r\n} from './task-flow-when';\r\n\r\n/**\r\n * Task constraint types\r\n */\r\nexport const TASK_CONSTRAINT_TYPES = {\r\n    /**\r\n     * Requires the end of a task part.\r\n     */\r\n    END: 'anim.end',\r\n    /**\r\n     * Requires a group of constraints.\r\n     */\r\n    GROUP: 'group',\r\n    /**\r\n     * Requires the start of a task part.\r\n     */\r\n    START : 'anim.start',\r\n    /**\r\n     * Requires an amount of time.\r\n     */\r\n    WAIT_FOR: 'wait',\r\n};\r\n\r\nexport abstract class TaskPartConstraint extends TaskPartWhenConstraint {\r\n    /**\r\n     * Alias of the part affected by this constraint.\r\n     */\r\n    public alias: string;\r\n\r\n    /**\r\n     * Creates a new task part constraint.\r\n     * @param after Constraint to apply after this constraint is checked.\r\n     * @param alias Aliases of the parts affected by this constraint.\r\n     * @param constraintType Constraint type.\r\n     */\r\n    public constructor(after: ITaskPartWhenConstraint, alias: string, constraintType: string) {\r\n        super(after, constraintType);\r\n\r\n        this.alias = alias;\r\n    }\r\n}\r\n","import { ITaskPartWhenConstraint } from './task-flow-when';\r\nimport {\r\n    TASK_CONSTRAINT_TYPES,\r\n    TaskPartConstraint,\r\n} from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once a task part ends.\r\n */\r\nexport class TaskPartEndConstraint extends TaskPartConstraint {\r\n    public constructor(after: ITaskPartWhenConstraint, alias: string) {\r\n        super(after, alias, TASK_CONSTRAINT_TYPES.END);\r\n    }\r\n}\r\n","import { TaskPartWhenOperator } from '../task-part-when-operator';\r\nimport {\r\n    ITaskPartWhenConstraint,\r\n    TaskPartWhenConstraint,\r\n} from './task-flow-when';\r\nimport { TASK_CONSTRAINT_TYPES } from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once a group of constraints are checked.\r\n */\r\nexport class TaskGroupConstraint extends TaskPartWhenConstraint {\r\n    /**\r\n     * Constraints to ensure\r\n     */\r\n    public constraints: ITaskPartWhenConstraint[];\r\n    /**\r\n     * Logical operator\r\n     */\r\n    public operator: TaskPartWhenOperator;\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     *\r\n     * @param after Constraint to check after all the constraitns of the group have successfully checked.\r\n     * @param constraints Group of constraints to check.\r\n     * @param operator Logical operator to apply.\r\n     */\r\n    public constructor(\r\n        after: ITaskPartWhenConstraint,\r\n        constraints: ITaskPartWhenConstraint[],\r\n        operator: TaskPartWhenOperator,\r\n    ) {\r\n        super(after, TASK_CONSTRAINT_TYPES.GROUP);\r\n\r\n        this.constraints = constraints;\r\n        this.operator = operator;\r\n    }\r\n}\r\n","import {\r\n    ITaskPartWhenConstraint,\r\n    TaskPartWhenConstraint,\r\n} from './task-flow-when';\r\nimport { TASK_CONSTRAINT_TYPES } from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once an amount of time passes.\r\n */\r\nexport class TaskTimeConstraint extends TaskPartWhenConstraint {\r\n    /**\r\n     * Milliseconds to wait.\r\n     */\r\n    public millis: number;\r\n\r\n    public constructor(after: ITaskPartWhenConstraint, millis: number) {\r\n        super(after, TASK_CONSTRAINT_TYPES.WAIT_FOR);\r\n        this.millis = millis;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { TokenMap } from '../../collection/token-map';\r\nimport { IOperationManagerAccess } from './operation-manager-access';\r\n\r\n/**\r\n * Operation arguments\r\n */\r\nexport interface IOperationArgs {\r\n    aliases: string[];\r\n}\r\n\r\n/**\r\n * Represents an operation manager. The operation is propagated using an event.\r\n * All the subscribers\r\n */\r\nexport class OperationManager<Args extends IOperationArgs> implements IOperationManagerAccess<Args> {\r\n\r\n    //#region Attributes\r\n\r\n    /**\r\n     * Function to be called to handle the event.\r\n     */\r\n    protected callFunction: (eventArgs: Args) => void;\r\n\r\n    /**\r\n     * Alias of the event.\r\n     */\r\n    protected eventAlias: string;\r\n\r\n    /**\r\n     * Event emmitter of the event.\r\n     */\r\n    protected eventEmitter: EventEmitter;\r\n\r\n    /**\r\n     * Object to storage all the functions subscribed.\r\n     */\r\n    protected subscriptionStorage: { [alias: string]: TokenMap<(eventArgs: Args) => void> };\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Creates a new operation manager\r\n     * @param eventAlias Event alias.\r\n     * @param eventEmitter Event emitter.\r\n     */\r\n    public constructor(eventAlias: string, eventEmitter: EventEmitter) {\r\n        const that = this;\r\n        this.callFunction = function(eventArgs: Args): void {\r\n            if (eventArgs.aliases == null) {\r\n                for (const alias in that.subscriptionStorage) {\r\n                    if (that.subscriptionStorage.hasOwnProperty(alias)) {\r\n                        const subscribers = that.subscriptionStorage[alias];\r\n                        if (subscribers != null) {\r\n                            subscribers.foreach(function(value: (eventArgs: Args) => void) {\r\n                                value(eventArgs);\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                for (const alias of eventArgs.aliases) {\r\n                    const subscribers = that.subscriptionStorage[alias];\r\n                    if (subscribers != null) {\r\n                        subscribers.foreach(function(value: (eventArgs: Args) => void) {\r\n                            value(eventArgs);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        this.eventAlias = eventAlias;\r\n        this.eventEmitter = eventEmitter;\r\n        this.subscriptionStorage = {};\r\n\r\n        this.eventEmitter.addListener(this.eventAlias, this.callFunction);\r\n    }\r\n\r\n    /**\r\n     * Disposes the instance.\r\n     */\r\n    public dispose(): void {\r\n        this.eventEmitter.removeListener(this.eventAlias, this.callFunction);\r\n    }\r\n\r\n    /**\r\n     * Substribes a handler under an alias.\r\n     * @param alias Alias of the handler.\r\n     * @param handler Handler to be subscribed.\r\n     */\r\n    public subscribe(alias: string, handler: (eventArgs: Args) => void): number {\r\n        if (null == this.subscriptionStorage[alias]) {\r\n            this.subscriptionStorage[alias] = new TokenMap();\r\n        }\r\n        return this.subscriptionStorage[alias].add(handler);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes a handler under an alias.\r\n     * @param alias Alias of the handler.\r\n     * @param index Index of the handler.\r\n     */\r\n    public unsubscribe(alias: string, index: number): boolean {\r\n        if (null == this.subscriptionStorage[alias]) {\r\n            return false;\r\n        } else {\r\n            return this.subscriptionStorage[alias].remove(index);\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { ITaskFlow } from './flow/task-flow';\r\nimport { ITaskFlowPart } from './flow/task-flow-part';\r\nimport {\r\n    ITaskFlowPartEndArgs,\r\n    ITaskFlowPartStartArgs,\r\n} from './flow/task-flow-part-event-args';\r\nimport { ITaskPartWhenConstraint } from './flow/task-flow-when';\r\nimport { TaskPartBeginConstraint } from './flow/task-part-begin-constraint';\r\nimport { TASK_CONSTRAINT_TYPES } from './flow/task-part-constraint';\r\nimport { TaskPartEndConstraint } from './flow/task-part-end-constraint';\r\nimport { TaskGroupConstraint } from './flow/task-part-group-constraint';\r\nimport { TaskTimeConstraint } from './flow/task-part-time-constraint';\r\nimport { OperationManager } from './operation/operation-manager';\r\nimport { IOperationManagerAccess } from './operation/operation-manager-access';\r\nimport { TASK_PART_WHEN_EVENTS } from './task-part-when-events';\r\nimport { TaskPartWhenOperator } from './task-part-when-operator';\r\n\r\n/**\r\n * Represents a task engine.\r\n */\r\nexport abstract class TaskEngine<TPart extends ITaskFlowPart> {\r\n    //#region Attributes\r\n\r\n    /**\r\n     * Task currently managed.\r\n     */\r\n    protected currentTask: ITaskFlow<TPart>;\r\n\r\n    /**\r\n     * Event emitter to use\r\n     */\r\n    protected eventEmitter: EventEmitter;\r\n\r\n    //#region Operations\r\n\r\n    /**\r\n     * Manager that handles the part end event.\r\n     */\r\n    protected partEndManager: OperationManager<ITaskFlowPartEndArgs<TPart>>;\r\n\r\n    /**\r\n     * Manager that handles the part start event.\r\n     */\r\n    protected partStartManager: OperationManager<ITaskFlowPartStartArgs<TPart>>;\r\n\r\n    //#endregion\r\n\r\n    //#endregion\r\n\r\n    //#region Public\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     */\r\n    public constructor() {\r\n        this.eventEmitter = new EventEmitter();\r\n\r\n        this.partEndManager = new OperationManager<ITaskFlowPartEndArgs<TPart>>(\r\n            TASK_PART_WHEN_EVENTS.END,\r\n            this.eventEmitter,\r\n        );\r\n        this.partStartManager = new OperationManager<ITaskFlowPartStartArgs<TPart>>(\r\n            TASK_PART_WHEN_EVENTS.START,\r\n            this.eventEmitter,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Obtains the access of the part end event.\r\n     * @returns Access of the part end event.\r\n     */\r\n    public getPartEndListenerAccess(): IOperationManagerAccess<ITaskFlowPartEndArgs<TPart>> {\r\n        const that = this;\r\n        return {\r\n            subscribe: function(\r\n                alias: string,\r\n                handler: (eventArgs: ITaskFlowPartEndArgs<TPart>) => void,\r\n            ): number {\r\n                return that.partEndManager.subscribe(alias, handler);\r\n            },\r\n            unsubscribe: function(alias: string, index: number): boolean {\r\n                return that.partEndManager.unsubscribe(alias, index);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Obtains the access of the part start event.\r\n     * @returns Access of the part start event.\r\n     */\r\n    public getPartStartListenerAccess(): IOperationManagerAccess<ITaskFlowPartStartArgs<TPart>> {\r\n        const that = this;\r\n        return {\r\n            subscribe: function(\r\n                alias: string,\r\n                handler: (eventArgs: ITaskFlowPartStartArgs<TPart>) => void,\r\n            ): number {\r\n                return that.partStartManager.subscribe(alias, handler);\r\n            },\r\n            unsubscribe: function(alias: string, index: number): boolean {\r\n                return that.partStartManager.unsubscribe(alias, index);\r\n            },\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a task flow.\r\n     * @param taskFlow Task flow to be managed.\r\n     * @returns Task part promises.\r\n     */\r\n    public handle(taskFlow: ITaskFlow<TPart>): Array<Promise<void>> {\r\n        if (taskFlow == null) {\r\n            throw new Error('It\\'s required a task flow.');\r\n        }\r\n        if (taskFlow.parts == null) {\r\n            throw new Error('It\\'s required a task flow with parts.');\r\n        }\r\n\r\n        this.currentTask = taskFlow;\r\n        const partPromises: Array<Promise<void>> = new Array(taskFlow.parts.length);\r\n\r\n        for (var i = 0; i < taskFlow.parts.length; ++i) {\r\n            partPromises[i] = this.handleTaskPart(taskFlow.parts[i]);\r\n        }\r\n\r\n        return partPromises;\r\n    }\r\n\r\n    //#endregion\r\n\r\n    /**\r\n     * Handles a task part.\r\n     *\r\n     * @param part Task part to handle.\r\n     *\r\n     * @returns Promise resolved once the part of the task is finished.\r\n     */\r\n    protected handleTaskPart(part: TPart): Promise<void> {\r\n        const that = this;\r\n\r\n        return new Promise<void>(function(resolve, reject) {\r\n            that.handleTaskPartWhen(part.when).then(function() {\r\n                // 1. Emit the start of task part.\r\n                that.eventEmitter.emit(\r\n                    TASK_PART_WHEN_EVENTS.START,\r\n                    {\r\n                        aliases: [part.alias],\r\n                        part: part,\r\n                    } as ITaskFlowPartStartArgs<TPart>,\r\n                );\r\n\r\n                const promise: PromiseLike<{} | void> = that.performTask(part);\r\n\r\n                promise.then(function() {\r\n                    // 3. Emit the end of the task part and resolve the promise.\r\n                    that.eventEmitter.emit(\r\n                        TASK_PART_WHEN_EVENTS.END,\r\n                        {\r\n                            aliases: [part.alias],\r\n                            part: part,\r\n                        } as ITaskFlowPartEndArgs<TPart>,\r\n                    );\r\n                    resolve();\r\n                });\r\n            }).catch(function(err: any) {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Performs a task part.\r\n     * @param part Task part to be performed.\r\n     * @returns Promise resolved once the part task is performed.\r\n     */\r\n    protected abstract performTask(part: TPart): PromiseLike<{} | void>;\r\n\r\n    //#region TaskPartWhenconstraint\r\n\r\n    /**\r\n     * Handles the when entity of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhen(whenEntity: ITaskPartWhenConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            if (null == whenEntity) {\r\n                resolve();\r\n            } else {\r\n                switch (whenEntity.constraintType) {\r\n                    case TASK_CONSTRAINT_TYPES.START:\r\n                        that.handleTaskPartWhenPartBegins(whenEntity as TaskPartBeginConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.END:\r\n                        that.handleTaskPartWhenPartEnds(whenEntity as TaskPartEndConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.GROUP:\r\n                        that.handleTaskPartWhenPartGroup(whenEntity as TaskGroupConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    case TASK_CONSTRAINT_TYPES.WAIT_FOR:\r\n                        that.handleTaskPartWhenWaitFor(whenEntity as TaskTimeConstraint)\r\n                            .then(resolve);\r\n                        break;\r\n                    default:\r\n                        reject(new Error('Unexpected when entity type.'));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskPartBeginConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartBegins(whenEntity: TaskPartBeginConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const eventHandler = function() {\r\n                that.partStartManager.unsubscribe(whenEntity.alias, token);\r\n                if (null == whenEntity.after) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            };\r\n            const token: number = that.partStartManager.subscribe(whenEntity.alias, eventHandler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskPartEndConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartEnds(whenEntity: TaskPartEndConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const eventHandler = function() {\r\n                that.partEndManager.unsubscribe(whenEntity.alias, token);\r\n                if (null == whenEntity.after) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            };\r\n            const token: number = that.partEndManager.subscribe(whenEntity.alias, eventHandler);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskGroupConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenPartGroup(whenEntity: TaskGroupConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            const childPromises: Array<Promise<void>> = new Array(whenEntity.constraints.length);\r\n\r\n            for (var i = 0; i < whenEntity.constraints.length; ++i) {\r\n                childPromises[i] = new Promise<void>(function(resolve, reject) {\r\n                    that.handleTaskPartWhen(whenEntity.constraints[i])\r\n                        .then(resolve);\r\n                });\r\n            }\r\n\r\n            if (TaskPartWhenOperator.AND === whenEntity.operator) {\r\n                Promise.all(childPromises)\r\n                    .then(function() {\r\n                        resolve();\r\n                    });\r\n            } else if (TaskPartWhenOperator.OR === whenEntity.operator) {\r\n                Promise.race(childPromises)\r\n                .then(function() {\r\n                    resolve();\r\n                });\r\n            } else {\r\n                reject('Unexpected operator.');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the when entity (TaskTimeConstraint) of a task part.\r\n     *\r\n     * @param whenEntity When entity to handle.\r\n     *\r\n     * @returns Promise resolved once the when entity is checked.\r\n     */\r\n    protected handleTaskPartWhenWaitFor(whenEntity: TaskTimeConstraint): Promise<void> {\r\n        const that = this;\r\n        return new Promise<void>(function(resolve, reject) {\r\n            setTimeout(function() {\r\n                if (whenEntity.after == null) {\r\n                    resolve();\r\n                } else {\r\n                    that.handleTaskPartWhen(whenEntity.after)\r\n                        .then(resolve);\r\n                }\r\n            }, whenEntity.millis);\r\n        });\r\n    }\r\n\r\n    //#endregion\r\n}\r\n","/**\r\n * Prefixes used to ganerate alias for events over task parts.\r\n */\r\nexport const TASK_PART_WHEN_EVENTS = {\r\n    /**\r\n     * Prefix for any event raised once a task part is ended.\r\n     */\r\n    END: 'part.end',\r\n    /**\r\n     * Prefix for any event raised once a task part is started.\r\n     */\r\n    START: 'part.start',\r\n};\r\n","/**\r\n * Logical operator to apply.\r\n */\r\nexport enum TaskPartWhenOperator {\r\n    /**\r\n     * And operator.\r\n     */\r\n    AND,\r\n    /**\r\n     * Or operator.\r\n     */\r\n    OR,\r\n}\r\n","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar objectCreate = Object.create || objectCreatePolyfill\nvar objectKeys = Object.keys || objectKeysPolyfill\nvar bind = Function.prototype.bind || functionBindPolyfill\n\nfunction EventEmitter() {\n  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n    this._events = objectCreate(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nvar hasDefineProperty;\ntry {\n  var o = {};\n  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n  hasDefineProperty = o.x === 0;\n} catch (err) { hasDefineProperty = false }\nif (hasDefineProperty) {\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n    enumerable: true,\n    get: function() {\n      return defaultMaxListeners;\n    },\n    set: function(arg) {\n      // check whether the input is a positive number (whose value is zero or\n      // greater and not a NaN).\n      if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n        throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n      defaultMaxListeners = arg;\n    }\n  });\n} else {\n  EventEmitter.defaultMaxListeners = defaultMaxListeners;\n}\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    if (arguments.length > 1)\n      er = arguments[1];\n    if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Unhandled \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n      // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n      // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = objectCreate(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n          listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n          prepend ? [listener, existing] : [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n            existing.length + ' \"' + String(type) + '\" listeners ' +\n            'added. Use emitter.setMaxListeners() to ' +\n            'increase limit.');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        if (typeof console === 'object' && console.warn) {\n          console.warn('%s: %s', w.name, w.message);\n        }\n      }\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    switch (arguments.length) {\n      case 0:\n        return this.listener.call(this.target);\n      case 1:\n        return this.listener.call(this.target, arguments[0]);\n      case 2:\n        return this.listener.call(this.target, arguments[0], arguments[1]);\n      case 3:\n        return this.listener.call(this.target, arguments[0], arguments[1],\n            arguments[2]);\n      default:\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; ++i)\n          args[i] = arguments[i];\n        this.listener.apply(this.target, args);\n    }\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = bind.call(onceWrapper, state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = objectCreate(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else\n          spliceOne(list, position);\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = objectCreate(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = objectKeys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = objectCreate(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (!events)\n    return [];\n\n  var evlistener = events[type];\n  if (!evlistener)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction objectCreatePolyfill(proto) {\n  var F = function() {};\n  F.prototype = proto;\n  return new F;\n}\nfunction objectKeysPolyfill(obj) {\n  var keys = [];\n  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {\n    keys.push(k);\n  }\n  return k;\n}\nfunction functionBindPolyfill(context) {\n  var fn = this;\n  return function () {\n    return fn.apply(context, arguments);\n  };\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}