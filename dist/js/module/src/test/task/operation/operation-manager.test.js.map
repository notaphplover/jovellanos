{"version":3,"sources":["test/task/operation/operation-manager.test.ts"],"names":[],"mappings":"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","file":"operation-manager.test.js","sourcesContent":["import { EventEmitter } from 'events';\nimport { ITaskFlowPartEndArgs } from '../../../task/flow/task-flow-part-event-args';\nimport { OperationManager } from '../../../task/operation/operation-manager';\nimport { ITest } from '../../ITest';\nimport { LogMessageTaskFlowPart } from '../../logic/flow/log-message-task-flow-part';\nimport { SampleLog } from '../../logic/sample-log';\n\nconst operationManagerTestEventAlias = 'test-alias';\n\nexport class OperationManagerTests implements ITest {\n    public performTests(): void {\n        describe('Operation Manager Tests', () => {\n            this.itMustBeToBeAbleToBeDisposed();\n            this.itMustBeInitializable();\n            this.itMustBeAbleToRaiseAnEventListeners();\n            this.itMustBeAbleToRaiseMultipleEventListeners();\n            this.itMustNotBeAbleToUnsuscribeByAnUnregisteredAlias();\n        });\n    }\n\n    private itMustBeToBeAbleToBeDisposed(): void {\n        it('mustBeToBeAbleToBeDisposed', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            const log = new SampleLog();\n            operationManager.subscribe(\n                'sample-alias',\n                (eventArgs) => log.logMessage(eventArgs.part.message),\n            );\n            operationManager.dispose();\n            eventEmitter.emit(\n                operationManagerTestEventAlias,\n                {\n                    aliases: ['sample-alias'],\n                    part: new LogMessageTaskFlowPart(\n                        'sample-task-alias',\n                        'sample-message-text',\n                    ),\n                } as ITaskFlowPartEndArgs<LogMessageTaskFlowPart>,\n            );\n            expect(log.getMessages()).toEqual([]);\n        });\n    }\n\n    private itMustBeAbleToRaiseAnEventListeners(): void {\n        it('mustBeAbleToRaiseAnEventListeners', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            const log = new SampleLog();\n            operationManager.subscribe(\n                'sample-alias',\n                (eventArgs) => log.logMessage(eventArgs.part.message),\n            );\n            eventEmitter.emit(\n                operationManagerTestEventAlias,\n                {\n                    aliases: ['sample-alias'],\n                    part: new LogMessageTaskFlowPart(\n                        'sample-task-alias',\n                        'sample-message-text',\n                    ),\n                } as ITaskFlowPartEndArgs<LogMessageTaskFlowPart>,\n            );\n            expect(log.getMessages()).toEqual(['sample-message-text']);\n        });\n    }\n\n    private itMustBeAbleToRaiseMultipleEventListeners(): void {\n        it('mustBeAbleToRaiseMultipleEventListeners', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            const log = new SampleLog();\n            operationManager.subscribe(\n                'sample-alias',\n                (eventArgs) => log.logMessage(eventArgs.part.message),\n            );\n            operationManager.subscribe(\n                'sample-alias-2',\n                (eventArgs) => log.logMessage(eventArgs.part.message),\n            );\n            eventEmitter.emit(\n                operationManagerTestEventAlias,\n                {\n                    aliases: null,\n                    part: new LogMessageTaskFlowPart(\n                        'sample-task-alias',\n                        'sample-message-text',\n                    ),\n                } as ITaskFlowPartEndArgs<LogMessageTaskFlowPart>,\n            );\n            expect(log.getMessages()).toEqual(['sample-message-text', 'sample-message-text']);\n        });\n    }\n\n    private itMustBeInitializable(): void {\n        it('mustBeInitializable', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            expect(operationManager).not.toBeNull();\n        });\n    }\n\n    private itMustNotBeAbleToUnsuscribeByAnUnregisteredAlias() {\n        it('mustNotBeAbleToUnsuscribeByAnUnregisteredAlias', () => {\n            const eventEmitter = new EventEmitter();\n            const operationManager = new OperationManager<ITaskFlowPartEndArgs<LogMessageTaskFlowPart>>(\n                operationManagerTestEventAlias,\n                eventEmitter,\n            );\n            expect(operationManager.unsubscribe('unexisting-alias', 0)).toBe(false);\n        });\n    }\n}\n"],"sourceRoot":"../../../../../../../src"}