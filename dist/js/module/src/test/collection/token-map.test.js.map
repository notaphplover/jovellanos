{"version":3,"sources":["test/collection/token-map.test.ts"],"names":[],"mappings":"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","file":"token-map.test.js","sourcesContent":["import { TokenMap } from '../../collection/token-map';\r\nimport { ITest } from '../ITest';\r\n\r\nexport class TokenMapTests implements ITest {\r\n\r\n    public performTests(): void {\r\n        describe('Token Map Tests', () => {\r\n            this.itMustBeInitializable();\r\n            this.itMustBeAbleToAddElements();\r\n            this.itMustBeAbleToAddAndRemoveElements();\r\n            this.itMustBeAbleToIterateOverElements();\r\n            this.itMustBeAbleToReuseUnusedIndexes();\r\n            this.itMustNotBeAbleToRemoveUnusedIndexes();\r\n        });\r\n    }\r\n\r\n    private itMustBeInitializable(): void {\r\n        it('mustBeInitializable', () => {\r\n            const map = new TokenMap();\r\n            expect(map).not.toBe(null);\r\n            expect(map.count()).toBe(0);\r\n        });\r\n    }\r\n\r\n    private itMustBeAbleToAddElements(): void {\r\n        it('mustBeAbleToAddElements', () => {\r\n            const map = new TokenMap<{}>();\r\n            const elementsToAdd = 64;\r\n\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.add(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.get(i)).toBe(i);\r\n            }\r\n\r\n            expect(map.count()).toBe(elementsToAdd);\r\n        });\r\n    }\r\n\r\n    private itMustBeAbleToAddAndRemoveElements(): void {\r\n        it('mustBeAbleToAddAndRemoveElements', () => {\r\n            const map = new TokenMap<{}>();\r\n            const elementsToAdd = 64;\r\n            const elementsToRemove = 32;\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.add(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.get(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToRemove; ++i) {\r\n                expect(map.remove(i)).toBe(true);\r\n            }\r\n\r\n            expect(map.count()).toBe(elementsToAdd - elementsToRemove);\r\n        });\r\n    }\r\n\r\n    private itMustBeAbleToIterateOverElements() {\r\n        it('mustBeAbleToIterateOverElements', () => {\r\n            const map = new TokenMap<number>();\r\n            const elementsToAdd = 8;\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                const power = Math.pow(2, i);\r\n                map.add(power);\r\n            }\r\n\r\n            let sum = 0;\r\n            map.foreach((value, key) => {\r\n                sum = sum + value;\r\n            });\r\n\r\n            const expectedValue = Math.pow(2, elementsToAdd) - 1;\r\n            expect(sum).toBe(expectedValue);\r\n        });\r\n    }\r\n\r\n    private itMustBeAbleToReuseUnusedIndexes(): void {\r\n        it('mustBeAbleToReuseUnusedIndexes', () => {\r\n            const map = new TokenMap<{}>();\r\n            const elementsToAdd = 64;\r\n            const elementsToRemove = 32;\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.add(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToAdd; ++i) {\r\n                expect(map.get(i)).toBe(i);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToRemove; ++i) {\r\n                expect(map.remove(i)).toBe(true);\r\n            }\r\n\r\n            for (var i = 0; i < elementsToRemove; ++i) {\r\n                expect(map.add(i)).toBeLessThan(elementsToRemove);\r\n            }\r\n\r\n            expect(map.count()).toBe(elementsToAdd);\r\n        });\r\n    }\r\n\r\n    private itMustNotBeAbleToRemoveUnusedIndexes(): void {\r\n        it('mustNotBeAbleToRemoveUnusedIndexes', () => {\r\n            const map = new TokenMap<{}>();\r\n            expect(map.remove(0)).toBe(false);\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"../../../../../../src"}