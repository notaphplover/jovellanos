{"version":3,"sources":["task/flow/task-part-group-constraint.ts"],"names":[],"mappings":"AACA,OAAO,EAEH,sBAAsB,GACzB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,qBAAqB,EAAE,MAAM,wBAAwB,CAAC;AAK/D,MAAM,OAAO,mBAAoB,SAAQ,sBAAsB;IAiB3D,YACI,KAA8B,EAC9B,WAAsC,EACtC,QAA8B;QAE9B,KAAK,CAAC,KAAK,EAAE,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAE1C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;CACJ","file":"task-part-group-constraint.js","sourcesContent":["import { TaskPartWhenOperator } from '../task-part-when-operator';\r\nimport {\r\n    ITaskPartWhenConstraint,\r\n    TaskPartWhenConstraint,\r\n} from './task-flow-when';\r\nimport { TASK_CONSTRAINT_TYPES } from './task-part-constraint';\r\n\r\n/**\r\n * Represents a when constraint that is checked once a group of constraints are checked.\r\n */\r\nexport class TaskGroupConstraint extends TaskPartWhenConstraint {\r\n    /**\r\n     * Constraints to ensure\r\n     */\r\n    public constraints: ITaskPartWhenConstraint[];\r\n    /**\r\n     * Logical operator\r\n     */\r\n    public operator: TaskPartWhenOperator;\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     *\r\n     * @param after Constraint to check after all the constraitns of the group have successfully checked.\r\n     * @param constraints Group of constraints to check.\r\n     * @param operator Logical operator to apply.\r\n     */\r\n    public constructor(\r\n        after: ITaskPartWhenConstraint,\r\n        constraints: ITaskPartWhenConstraint[],\r\n        operator: TaskPartWhenOperator,\r\n    ) {\r\n        super(after, TASK_CONSTRAINT_TYPES.GROUP);\r\n\r\n        this.constraints = constraints;\r\n        this.operator = operator;\r\n    }\r\n}\r\n"],"sourceRoot":"../../../../../../../src"}