{"version":3,"sources":["test/task/log-task-engine.test.ts"],"names":[],"mappings":"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","file":"log-task-engine.test.js","sourcesContent":["import { ITaskFlow } from '../../task/flow/task-flow';\nimport { TaskPartBeginConstraint } from '../../task/flow/task-part-begin-constraint';\nimport { TaskPartEndConstraint } from '../../task/flow/task-part-end-constraint';\nimport { TaskGroupConstraint } from '../../task/flow/task-part-group-constraint';\nimport { TaskTimeConstraint } from '../../task/flow/task-part-time-constraint';\nimport { TaskPartWhenOperator } from '../../task/task-part-when-operator';\nimport { ITest } from '../ITest';\nimport {\n    LogMessageTaskFlowPart,\n} from '../logic/flow/log-message-task-flow-part';\nimport { LogTaskEngine } from '../logic/log-task-engine';\nimport { SampleLog } from '../logic/sample-log';\n\nconst LogMessageTaskFlowPartAliasPrefix: string = 'jovellanos/test/LogMessageTaskFlowPart/';\n\nexport class LogTaskEngineTests implements ITest {\n\n    public performTests(): void {\n        describe('Log Task Engine Tests', () => {\n            this.itMustBeAbleToPerformASimpleTask();\n            this.itMustBeAbleToPerformATaskAfterACertainAmountOfTime();\n            this.itMustBeAbleToPerformATaskAfterTheEndOfAllTasksOfATaskGroup();\n            this.itMustBeAbleToPerformATaskAfterTheEndOfAnotherOne();\n            this.itMustBeAbleToPerformATaskAfterTheStartOfAnotherOne();\n            this.itMustBeAbleToPerformATaskAfterTheStartOfAnyTaskOfATaskGroup();\n            this.itMustBeAbleToSubscribeAPartEndEventListener();\n            this.itMustBeAbleToSubscribeAPartStartEventListener();\n            this.itMustBeAbleToUnsubscribeAPartEndEventListener();\n            this.itMustBeAbleToUnsubscribeAPartStartEventListener();\n            this.itMustBeInitializable();\n            this.itMustNotAllowToHandleANullInstance();\n            this.itMustNotAllowToHandleAnInstanceWithNoParts();\n            this.itMustNotBeAbleToHandleAnInvalidTask();\n            this.itMustStartWithALog();\n            this.itMustStartWithNoMessages();\n        });\n    }\n\n    private itMustBeAbleToPerformASimpleTask(): void {\n        it('mustBeAbleToPerformASimpleTask', () => {\n            const engine = new LogTaskEngine();\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        LogMessageTaskFlowPartAliasPrefix + 'sample',\n                        'test',\n                    ),\n                ],\n            };\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual(['test']);\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterACertainAmountOfTime() {\n        it('mustBeAbleToPerformATaskAfterACertainAmountOfTime', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const partAlias3 = LogMessageTaskFlowPartAliasPrefix + 'sample-3';\n\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n\n            const taskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        partAlias1,\n                        'test-1',\n                        new Promise((resolve) => setTimeout(resolve, 200)),\n                    ),\n                    new LogMessageTaskFlowPart(\n                        partAlias2,\n                        'test-2',\n                        null,\n                        new TaskTimeConstraint(null, 250),\n                    ),\n                    new LogMessageTaskFlowPart(\n                        partAlias3,\n                        'test-3',\n                        new Promise((resolve) => setTimeout(resolve, 300)),\n                    ),\n                ],\n            };\n\n            Promise.all(engine.handle(taskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual(['test-1', 'test-2', 'test-3']);\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterTheEndOfAllTasksOfATaskGroup() {\n        it('mustBeAbleToPerformATaskAfterTheEndOfAllTasksOfATaskGroup', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const partAlias3 = LogMessageTaskFlowPartAliasPrefix + 'sample-3';\n\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n\n            const taskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        partAlias1,\n                        'test-1',\n                        null,\n                        new TaskGroupConstraint(\n                            null,\n                            [\n                                new TaskPartEndConstraint(\n                                    null,\n                                    partAlias2,\n                                ),\n                                new TaskPartEndConstraint(\n                                    null,\n                                    partAlias3,\n                                ),\n                            ],\n                            TaskPartWhenOperator.AND,\n                        ),\n                    ),\n                    new LogMessageTaskFlowPart(\n                        partAlias2,\n                        'test-2',\n                        null,\n                    ),\n                    new LogMessageTaskFlowPart(\n                        partAlias3,\n                        'test-3',\n                        null,\n                    ),\n                ],\n            };\n\n            Promise.all(engine.handle(taskFlow)).then(() => {\n                const logMessages = engine.getLog().getMessages();\n                const firstOnes = ['test-2', 'test-3'];\n                expect(firstOnes).toContain(logMessages[0]);\n                expect(firstOnes).toContain(logMessages[1]);\n                expect(logMessages[0]).not.toBe(logMessages[1]);\n                expect(logMessages[2]).toBe('test-1');\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterTheEndOfAnotherOne(): void {\n        it('mustBeAbleToPerformATaskAfterTheEndOfAnotherOne', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            const taskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        partAlias1,\n                        'test1',\n                        null,\n                        new TaskPartEndConstraint(null, partAlias2),\n                    ),\n                    new LogMessageTaskFlowPart(partAlias2, 'test2'),\n                ],\n            };\n            Promise.all(engine.handle(taskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual(['test2', 'test1']);\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterTheStartOfAnotherOne(): void {\n        it('mustBeAbleToPerformATaskAfterTheStartOfAnotherOne', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n\n            const part1SubscriberIsRegistered = new Promise<{\n                donePromise: Promise<number>,\n            }>(\n                (resolve) => {\n                    const part1IsDone = new Promise<number>((resolveCh) => {\n                        const token = engine.getPartEndListenerAccess().subscribe(partAlias1, () => {\n                            resolveCh(token);\n                        });\n                    });\n                    resolve({\n                        donePromise: part1IsDone,\n                    });\n                },\n            );\n            part1SubscriberIsRegistered.then((promiseResult) => {\n                const taskFlow = {\n                    parts: [\n                        new LogMessageTaskFlowPart(\n                            partAlias1,\n                            'test1',\n                            null,\n                            new TaskPartBeginConstraint(null, partAlias2),\n                        ),\n                        new LogMessageTaskFlowPart(\n                            partAlias2,\n                            'test2',\n                            promiseResult.donePromise,\n                        ),\n                    ],\n                };\n                Promise.all(engine.handle(taskFlow)).then(() => {\n                    expect(engine.getLog().getMessages()).toEqual(['test1', 'test2']);\n                });\n            });\n        });\n    }\n\n    private itMustBeAbleToPerformATaskAfterTheStartOfAnyTaskOfATaskGroup() {\n        it('mustBeAbleToPerformATaskAfterTheStartOfAnyTaskOfATaskGroup', () => {\n            const partAlias1 = LogMessageTaskFlowPartAliasPrefix + 'sample-1';\n            const partAlias2 = LogMessageTaskFlowPartAliasPrefix + 'sample-2';\n            const partAlias3 = LogMessageTaskFlowPartAliasPrefix + 'sample-3';\n\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n\n            const part1SubscriberIsRegistered = new Promise<{\n                donePromise: Promise<number>,\n            }>(\n                (resolve) => {\n                    const part1IsDone = new Promise<number>((resolveCh) => {\n                        const token = engine.getPartEndListenerAccess().subscribe(partAlias1, () => {\n                            resolveCh(token);\n                        });\n                    });\n                    resolve({\n                        donePromise: part1IsDone,\n                    });\n                },\n            );\n\n            part1SubscriberIsRegistered.then((promiseResult) => {\n                const taskFlow = {\n                    parts: [\n                        new LogMessageTaskFlowPart(\n                            partAlias1,\n                            'test-1',\n                            null,\n                            new TaskGroupConstraint(\n                                null,\n                                [\n                                    new TaskPartBeginConstraint(null, partAlias2),\n                                    new TaskPartBeginConstraint(null, partAlias3),\n                                ],\n                                TaskPartWhenOperator.OR,\n                            ),\n                        ),\n                        new LogMessageTaskFlowPart(partAlias2, 'test-2', promiseResult.donePromise),\n                        new LogMessageTaskFlowPart(partAlias3, 'test-3', promiseResult.donePromise),\n                    ],\n                };\n\n                Promise.all(engine.handle(taskFlow)).then(() => {\n                    const logMessages = engine.getLog().getMessages();\n                    const lastOnes = ['test-2', 'test-3'];\n                    expect(lastOnes).toContain(logMessages[1]);\n                    expect(lastOnes).toContain(logMessages[2]);\n                    expect(logMessages[1]).not.toBe(logMessages[2]);\n                    expect(logMessages[0]).toBe('test-1');\n                });\n            });\n        });\n    }\n\n    private itMustBeAbleToSubscribeAPartEndEventListener(): void {\n        it('mustBeAbleToSubscribeAPartEndEventListener', () => {\n            const partAlias = LogMessageTaskFlowPartAliasPrefix + 'sample';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            engine.getPartEndListenerAccess().subscribe(\n                partAlias,\n                (eventArgs) => {\n                    log.logMessage('end.' + eventArgs.part.message);\n                },\n            );\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(partAlias, 'test'),\n                ],\n            };\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual([\n                    'test',\n                    'end.test',\n                ]);\n            });\n        });\n    }\n\n    private itMustBeAbleToSubscribeAPartStartEventListener(): void {\n        it('mustBeAbleToSubscribeAPartStartEventListener', () => {\n            const partAlias = LogMessageTaskFlowPartAliasPrefix + 'sample';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            engine.getPartStartListenerAccess().subscribe(\n                partAlias,\n                (eventArgs) => {\n                    log.logMessage('start.' + eventArgs.part.message);\n                },\n            );\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(partAlias, 'test'),\n                ],\n            };\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual([\n                    'start.test',\n                    'test',\n                ]);\n            });\n        });\n    }\n\n    private itMustBeAbleToUnsubscribeAPartEndEventListener(): void {\n        it('mustBeAbleToUnsubscribeAPartEndEventListener', () => {\n            const partAlias = LogMessageTaskFlowPartAliasPrefix + 'sample';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            const token = engine.getPartEndListenerAccess().subscribe(\n                partAlias,\n                (eventArgs) => {\n                    log.logMessage('end.' + eventArgs.part.message);\n                },\n            );\n            const result = engine.getPartEndListenerAccess().unsubscribe(partAlias, token);\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(partAlias, 'test'),\n                ],\n            };\n            expect(result).toBe(true);\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual([\n                    'test',\n                ]);\n            });\n        });\n    }\n\n    private itMustBeAbleToUnsubscribeAPartStartEventListener(): void {\n        it('mustBeAbleToUnsubscribeAPartStartEventListener', () => {\n            const partAlias = LogMessageTaskFlowPartAliasPrefix + 'sample';\n            const log = new SampleLog();\n            const engine = new LogTaskEngine(log);\n            const token = engine.getPartStartListenerAccess().subscribe(\n                partAlias,\n                (eventArgs) => {\n                    log.logMessage('end.' + eventArgs.part.message);\n                },\n            );\n            const result = engine.getPartStartListenerAccess().unsubscribe(partAlias, token);\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(partAlias, 'test'),\n                ],\n            };\n            expect(result).toBe(true);\n            Promise.all(engine.handle(simpleTaskFlow)).then(() => {\n                expect(engine.getLog().getMessages()).toEqual([\n                    'test',\n                ]);\n            });\n        });\n    }\n\n    private itMustBeInitializable(): void {\n        it('mustBeInitializable', () => {\n            const engine = new LogTaskEngine();\n            expect(engine).not.toBeNull();\n        });\n    }\n\n    private itMustNotAllowToHandleANullInstance(): void {\n        it('mustNotAllowToHandleANullInstance', () => {\n            const engine = new LogTaskEngine();\n            expect(() => {engine.handle(null); }).toThrowError();\n        });\n    }\n\n    private itMustNotAllowToHandleAnInstanceWithNoParts(): void {\n        it('mustNotAllowToHandleAnInstanceWithNoParts', () => {\n            const engine = new LogTaskEngine();\n            expect(() => {\n                engine.handle({} as ITaskFlow<LogMessageTaskFlowPart>);\n            }).toThrowError();\n            expect(() => {\n                engine.handle({\n                    parts: null,\n                });\n            }).toThrowError();\n        });\n    }\n\n    private itMustNotBeAbleToHandleAnInvalidTask() {\n        it('mustNotBeAbleToHandleAnInvalidTask', () => {\n            const engine = new LogTaskEngine();\n            const simpleTaskFlow = {\n                parts: [\n                    new LogMessageTaskFlowPart(\n                        LogMessageTaskFlowPartAliasPrefix + 'sample',\n                        'test',\n                        null,\n                        {\n                            after: null,\n                            constraintType: 'invalidType',\n                        },\n                    ),\n                ],\n            };\n            Promise.all(engine.handle(simpleTaskFlow))\n                .then(fail)\n                .catch((err) => expect(err instanceof Error).toBe(true));\n        });\n    }\n\n    private itMustStartWithALog(): void {\n        it('mustStartWithALog', () => {\n            const engine = new LogTaskEngine();\n            expect(engine.getLog()).not.toBeNull();\n        });\n    }\n\n    private itMustStartWithNoMessages(): void {\n        it('mustStartWithNoMessages', () => {\n            const engine = new LogTaskEngine();\n            expect(engine.getLog().getMessages().length).toBe(0);\n        });\n    }\n}\n"],"sourceRoot":"../../../../../../../src"}